{"version":3,"file":"track.js","sourceRoot":"","sources":["../../src/classes/track.ts"],"names":[],"mappings":"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","sourcesContent":["import { getInfo } from 'ytdl-core';\nimport Discord, { MessageEmbed } from 'discord.js';\nimport { AudioResource, createAudioResource, demuxProbe } from '@discordjs/voice';\nimport { raw as ytdl } from 'youtube-dl-exec';\nconst { getColorFromURL } = require('color-thief-node'); // get color from image url\nimport { customClient } from '../bot';\n\nexport interface TrackData {\n\turl: string;\n\ttitle: string;\n\tdetails: any;\n\tonStart: () => void;\n\tonFinish: () => void;\n\tonError: (error: Error) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\n\n/**\n * A Track represents information about a YouTube video (in this context) that can be added to a queue.\n * It contains the title and URL of the video, as well as functions onStart, onFinish, onError, that act\n * as callbacks that are triggered at certain points during the track's lifecycle.\n *\n * Rather than creating an AudioResource for each video immediately and then keeping those in a queue,\n * we use tracks as they don't pre-emptively load the videos. Instead, once a Track is taken from the\n * queue, it is converted into an AudioResource just in time for playback.\n */\n\n\nexport class Track implements TrackData {\n\tpublic readonly url: string;\n\tpublic readonly title: string;\n\tpublic readonly details: any;\n\tpublic readonly onStart: () => void;\n\tpublic readonly onFinish: () => void;\n\tpublic readonly onError: (error: Error) => void;\n\n\tprivate constructor({ url, title, details, onStart, onFinish, onError }: TrackData) {\n\t\tthis.url = url;\n\t\tthis.title = title;\n\t\tthis.details = details;\n\t\tthis.onStart = onStart;\n\t\tthis.onFinish = onFinish;\n\t\tthis.onError = onError;\n\t}\n\n\t/**\n\t * Creates an AudioResource from this Track.\n\t */\n\tpublic createAudioResource(): Promise<AudioResource<Track>> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst process = ytdl(\n\t\t\t\tthis.url,\n\t\t\t\t{\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\to: '-',\n\t\t\t\t\tq: '',\n\t\t\t\t\tf: 'bestaudio[ext=webm+acodec=opus+asr=48000]/bestaudio',\n\t\t\t\t\tr: '100K',\n\t\t\t\t},\n\t\t\t\t{ stdio: ['ignore', 'pipe', 'ignore'] },\n\t\t\t);\n\t\t\tif (!process.stdout) {\n\t\t\t\treject(new Error('No stdout'));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst stream = process.stdout;\n\t\t\tconst onError = (error: Error) => {\n\t\t\t\tif (!process.killed) process.kill();\n\t\t\t\tstream.resume();\n\t\t\t\treject(error);\n\t\t\t};\n\t\t\tprocess\n\t\t\t\t.once('spawn', () => {\n\t\t\t\t\tdemuxProbe(stream)\n\t\t\t\t\t\t.then((probe) => resolve(createAudioResource(probe.stream, { metadata: this, inputType: probe.type })))\n\t\t\t\t\t\t.catch(onError);\n\t\t\t\t})\n\t\t\t\t.catch(onError);\n\t\t});\n\t}\n\n\t/**\n\t * Creates a Track from a video URL and lifecycle callback methods.\n\t *\n\t * @param url The URL of the video\n\t * @param interaction the interaction\n\t * @param client the client\n\t * @returns The created Track\n\t */\n\tpublic static async from(url: string, interaction: any, client: customClient): Promise<Track> {\n\t\tconst info = await getInfo(url);\n\n\t\tlet methods = {\n            async onStart() {\n                let subscription = client.subscriptions.get(interaction.guildId);\n\n\t\t\t\tclearTimeout(subscription.timeout);\n\n                if(!subscription){try { return await interaction.followUp({ content: `An error occurred, Try queue that song again!`, ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }}\n                if(!subscription.audioPlayer){try { return await interaction.followUp({ content: `An error occurred, Try queue that song again!`, ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }}\n                let song = (subscription.audioPlayer.state.resource).metadata.details\n\n                let imageForColor = song.thumbnails.filter((thumbnail: { url: string | string[]; }) => thumbnail.url.includes('.jpg'))\n\n                try {\n\n                    const nowPlayingEmbed = new MessageEmbed()\n                        .setTitle(song.title || \"Not Found!\")\n                        .setURL(song.video_url || \"Not Found!\")\n                        .setAuthor(song.author.name || \"Not Found!\")\n                        .setThumbnail(song.thumbnails[song.thumbnails.length - 1].url)\n                        .setTimestamp()\n                        .addField('Duration', client.secondsToHms(song.lengthSeconds) || \"Not Found!\", true)\n                        .addField('Upload Date', song.publishDate || \"Not Found!\", true)\n                        .addField('Views', song.viewCount || \"Not Found!\", true)\n                        .addField('Likes', song.likes.toString() || \"Not Found!\", true)\n                        //.addField('Dislikes', song.dislikes.toString() || \"Not Found!\", true)\n                        .addField('Rating', Math.floor(song.averageRating / 5 * 100).toString() + '%' || \"Not Found!\", true)\n                        .setFooter('Youtube', 'https://i.imgur.com/v2zMp3T.png');\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tlet extractColor = await getColorFromURL(imageForColor[imageForColor.length - 1].url.split('?')[0]);\n\t\t\t\t\t\tnowPlayingEmbed.setColor(client.rgbToHex(extractColor[0], extractColor[1], extractColor[2]));\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\tconsole.log(err)\n\t\t\t\t\t\tnowPlayingEmbed.setColor('#ffffff');\n\t\t\t\t\t}\n\n                    await interaction.followUp({ content: 'Now Playing!', embeds: [nowPlayingEmbed], ephemeral: false })\n\n                } catch (err) { console.log(err) }\n            },\n            async onFinish() {\n                let subscription = client.subscriptions.get(interaction.guildId);\n                if(!subscription){try { return await interaction.followUp({ content: `An error occurred`, ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }}\n                if(!subscription.audioPlayer){try { return await interaction.followUp({ content: `An error occurred`, ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }}\n                if (subscription.queue.length == 0 && interaction.guildId && subscription.voiceConnection) {\n                    try {\n                        subscription.voiceConnection.destroy();\n                        client.subscriptions.delete(interaction.guildId);\n                    } catch (err) { }\n                    client.user?.setActivity(`music in ${client.subscriptions.size} servers`, { type: \"LISTENING\", });\n                    try { await interaction.followUp({ content: `Left channel, no songs left in queue!`, ephemeral: true }) } catch (err) { console.log(err) }\n                } else {\n                    try { await interaction.followUp({ content: 'Now finished!', ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }\n                }\n            },\n            async onError(error: any) {\n                console.warn(error);\n                try { await interaction.followUp({ content: `Error: ${error.message}`, ephemeral: true }).catch(console.warn) } catch (err) { console.log(err) }\n            },\n        }\n\t\t// The methods are wrapped so that we can ensure that they are only called once.\n\t\tconst wrappedMethods = {\n\t\t\tonStart() {\n\t\t\t\twrappedMethods.onStart = noop;\n\t\t\t\tmethods.onStart();\n\t\t\t},\n\t\t\tonFinish() {\n\t\t\t\twrappedMethods.onFinish = noop;\n\t\t\t\tmethods.onFinish();\n\t\t\t},\n\t\t\tonError(error: Error) {\n\t\t\t\twrappedMethods.onError = noop;\n\t\t\t\tmethods.onError(error);\n\t\t\t},\n\t\t};\n\n\t\treturn new Track({\n\t\t\ttitle: info.videoDetails.title,\n\t\t\tdetails: info.videoDetails,\n\t\t\turl,\n\t\t\t...wrappedMethods,\n\t\t});\n\t}\n}\n"]}