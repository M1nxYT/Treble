{"version":3,"file":"ready.js","sourceRoot":"","sources":["../../src/events/ready.ts"],"names":[],"mappings":"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","sourcesContent":["import Discord, { Options } from 'discord.js';\nimport { customClient } from '../bot';\n\nimport { Request, Response } from 'express';\nimport path from 'path';\nimport { json } from 'stream/consumers';\nimport { MusicSubscription } from 'src/classes/subscription';\nimport { AudioPlayerStatus } from '@discordjs/voice';\n\nvar ConsoleGrid = require(\"console-grid\");\nconst CGS = ConsoleGrid.Style;\nvar grid = new ConsoleGrid();\n\nconst port = 3100;\n\nlet readyData = {\n    option: {\n        sortField: \"name\",\n        border: {\n            h: '─',\n            v: '│',\n            top_left: '┌',\n            top_mid: '┬',\n            top_right: '┐',\n            mid_left: '├',\n            mid_mid: '┼',\n            mid_right: '┤',\n            bottom_left: '└',\n            bottom_mid: '┴',\n            bottom_right: '┘'\n        },\n        hideHeaders: true,\n    },\n    columns: [{\n        id: \"name\",\n        name: \"Name\",\n        type: \"string\",\n        maxWidth: 100\n    }, {\n        id: \"value\",\n        name: \"Value\",\n        type: \"string\",\n        maxWidth: 30,\n    }],\n    rows: new Array()\n};\n\nlet extrasData = {\n    option: {\n        sortField: \"name\",\n        border: {\n            h: '─',\n            v: '│',\n            top_left: '┌',\n            top_mid: '┬',\n            top_right: '┐',\n            mid_left: '├',\n            mid_mid: '┼',\n            mid_right: '┤',\n            bottom_left: '└',\n            bottom_mid: '┴',\n            bottom_right: '┘'\n        },\n        hideHeaders: true,\n    },\n    columns: [{\n        id: \"name\",\n        name: \"Name\",\n        type: \"string\",\n        maxWidth: 100\n    }],\n    rows: new Array()\n};\n\nexport let ready = {\n    name: 'ready',\n    once: true,\n    async execute(args: any[], client: customClient) {\n        client.user?.setActivity(`music in 0 servers`, { type: \"LISTENING\", });\n\n        for (let guild of client.guilds.cache) {\n            let owner = await guild[1].fetchOwner()\n            let guildRow = {\n                name: CGS.green(`Ready in ${guild[1].name} `),\n                value: CGS.blue(`${owner.user.tag}`),\n            };\n            readyData.rows.push(guildRow);\n        }\n\n        if (client.db.readyState == 1) {\n            let dbRow = {\n                name: CGS.green(`Bot Database Connected `)\n            };\n            extrasData.rows.push(dbRow);\n        }\n\n        client.app.listen(port, () => {\n            let expressRow = {\n                name: CGS.green(`Bot Dashboard accessible at `) + CGS.blue(`http://localhost:${port}`)\n            };\n            extrasData.rows.push(expressRow);\n            grid.render(readyData);\n            grid.render(extrasData);\n        })\n\n        client.app.get('*', async (req: Request, res: Response) => {\n            let jsonObject = new Array()\n            client.subscriptions.forEach((value : MusicSubscription, key: string) => {\n                if (value.audioPlayer.state.status === AudioPlayerStatus.Playing) {\n                    let sub = {\n                        id : key,\n                        nowplaying: value.audioPlayer.state.resource.metadata,\n                        queue: value.queue,\n                        loopEnabled: value.isLooped\n                    }\n                    jsonObject.push(sub)\n                }\n                else {\n                    let sub = {\n                        id : key,\n                        nowplaying: 'Treble is currently not playing or paused in this server.',\n                        queue: value.queue,\n                        loopEnabled: value.isLooped\n                    }\n                    jsonObject.push(sub)\n                }\n            });\n            res.json(jsonObject)\n        })\n    }\n}\n\n\n\n"]}