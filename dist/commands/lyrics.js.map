{"version":3,"file":"lyrics.js","sourceRoot":"","sources":["../../src/commands/lyrics.ts"],"names":[],"mappings":"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","sourcesContent":["import { customClient } from \"../bot\";\nimport Genius from \"genius-lyrics\";\nimport { MessageEmbed, MessageInteraction } from \"discord.js\";\nimport { AudioPlayerStatus } from \"@discordjs/voice\";\nconst { getColorFromURL } = require('color-thief-node'); // get color from image url\nconst { SlashCommandBuilder } = require('@discordjs/builders'); // discord js slash command builder\nimport * as dotenv from 'dotenv'; // Load Env\ndotenv.config();\n\nconst genius = new Genius.Client(process.env['GENIUS_TOKEN']);\n\nexport let lyrics = {\n    name: 'lyrics',\n    description: 'Display Lyrics of current playing song!',\n    data: new SlashCommandBuilder().setName('lyrics').setDescription('Display Lyrics of current playing song!'),\n    ephemeral: false,\n\n    async execute(interaction: any, client: customClient) {\n        let subscription = client.subscriptions.get(interaction.guildId);\n        if (subscription) {\n            if (subscription.audioPlayer.state.status == AudioPlayerStatus.Playing) {\n                let input = (subscription.audioPlayer.state.resource).metadata.details\n\n                try {\n                    const searches = await genius.songs.search(input.title.replace('Official Video', '').replace('Music Video', ''));\n                    const song = searches[0];\n\n                    if (song) {\n                        const lyricsEmbed = new MessageEmbed()\n                            .setTitle(song.title || \"Not Found!\")\n                            .setURL(song.url || \"Not Found!\")\n                            .setAuthor(song.artist.name || \"Not Found!\")\n                            .setThumbnail(song.thumbnail)\n                            .setTimestamp()\n                            .setFooter('Genius', 'https://i.imgur.com/R1pX0eH.png');\n\n                        try {\n                            let extractColor = await getColorFromURL(song.thumbnail.split('?')[0]);\n                            lyricsEmbed.setColor(client.rgbToHex(extractColor[0], extractColor[1], extractColor[2]));\n                        } catch (err) {\n                            console.log(err)\n                            lyricsEmbed.setColor('#ffffff');\n                        }\n                        interaction.followUp({ content: 'Lyrics Found', embeds: [lyricsEmbed] })\n                    }\n                }\n                catch (err) {\n                    interaction.followUp('No results found!')\n                }\n\n            }\n            else { await interaction.followUp({ content: `No song is currently playing!` }); }\n        }\n        else { await interaction.followUp({ content: `No song is currently playing!` }); }\n    }\n}"]}