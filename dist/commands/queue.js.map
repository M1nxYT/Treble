{"version":3,"file":"queue.js","sourceRoot":"","sources":["../../src/commands/queue.ts"],"names":[],"mappings":";;;AAEA,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,EAAE,gBAAgB,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa;AACpJ,MAAM,EAAE,aAAa,EAAE,WAAW,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC,mBAAmB;AACtK,MAAM,EAAE,mBAAmB,EAAE,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,mCAAmC;AAExF,QAAA,KAAK,GAAG;IACf,IAAI,EAAE,OAAO;IACb,WAAW,EAAE,6BAA6B;IAC1C,IAAI,EAAE,IAAI,mBAAmB,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,6BAA6B,CAAC;IAC9F,SAAS,EAAE,KAAK;IAEhB,KAAK,CAAC,OAAO,CAAC,WAAgB,EAAE,MAAoB;QAChD,IAAI,YAAY,GAAG,MAAM,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACjE,+EAA+E;QAC/E,IAAI,YAAY,EAAE;YACd,MAAM,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAY,EAAE,KAAa,EAAE,EAAE,CAAC,GAAG,KAAK,GAAG,CAAC,KAAK,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAE7H,MAAM,eAAe,GAAG,IAAI,YAAY,EAAE;iBACrC,QAAQ,CAAC,SAAS,CAAC;iBACnB,QAAQ,CAAC,OAAO,CAAC;iBACjB,cAAc,CAAC,KAAK,CAAC;iBACrB,SAAS,CAAC,GAAG,YAAY,CAAC,KAAK,CAAC,MAAM,kBAAkB,EAAE,iCAAiC,CAAC,CAAA;YAEjG,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAClB,MAAM,WAAW,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;aAC7D;iBAAM;gBACH,MAAM,WAAW,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;aACnD;SACJ;aAAM;YACH,MAAM,WAAW,CAAC,QAAQ,CAAC,6BAA6B,CAAC,CAAC;SAC7D;IACL,CAAC;CACJ,CAAA","sourcesContent":["import { customClient } from \"../bot\";\nimport { Track } from \"../classes/track\";\nconst { Interaction, GuildMember, Snowflake, MessageActionRow, MessageEmbed, MessageSelectMenu, TextChannel } = require('discord.js'); // discord js\nconst { AudioResource, entersState, joinVoiceChannel, VoiceConnectionStatus, createAudioPlayer, AudioPlayerStatus } = require('@discordjs/voice'); // discord js voice\nconst { SlashCommandBuilder } = require('@discordjs/builders'); // discord js slash command builder\n\nexport let queue = {\n    name: 'queue',\n    description: 'Display the playback queue!',\n    data: new SlashCommandBuilder().setName('queue').setDescription('Display the playback queue!'),\n    ephemeral: false,\n    \n    async execute(interaction: any, client: customClient) {\n        let subscription = client.subscriptions.get(interaction.guildId);\n        // Print out the current queue, including up to the next 5 tracks to be played.\n        if (subscription) {\n            const queue = subscription.queue.slice(0, 5).map((track: Track, index: number) => `${index + 1}. ${track.title}`).join('\\n');\n\n            const nowPlayingEmbed = new MessageEmbed()\n                .setColor('#ffffff')\n                .setTitle('Queue')\n                .setDescription(queue)\n                .setFooter(`${subscription.queue.length} Total in queue!`, 'https://i.imgur.com/v2zMp3T.png')\n\n            if (queue.length > 0) {\n                await interaction.followUp({ embeds: [nowPlayingEmbed] });\n            } else {\n                await interaction.followUp(`No items in queue`);\n            }\n        } else {\n            await interaction.followUp('Not playing in this server!');\n        }\n    }\n}"]}