{"version":3,"file":"nowplaying.js","sourceRoot":"","sources":["../../src/commands/nowplaying.ts"],"names":[],"mappings":"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","sourcesContent":["import { customClient } from \"../bot\";\nconst { Interaction, GuildMember, Snowflake, MessageActionRow, MessageEmbed, MessageSelectMenu, TextChannel } = require('discord.js'); // discord js\nconst { AudioResource, entersState, joinVoiceChannel, VoiceConnectionStatus, createAudioPlayer, AudioPlayerStatus } = require('@discordjs/voice'); // discord js voice\nconst { SlashCommandBuilder } = require('@discordjs/builders'); // discord js slash command builder\nconst { getColorFromURL } = require('color-thief-node'); // get color from image url\n\nexport let nowplaying = {\n    name: 'nowplaying',\n    description: 'Get information about currently playing song!',\n    data: new SlashCommandBuilder().setName('nowplaying').setDescription('Get information about currently playing song!'),\n    ephemeral: true,\n    \n    async execute(interaction: any, client: customClient) {\n        let subscription = client.subscriptions.get(interaction.guildId);\n\n        if (subscription) {\n            if (subscription.audioPlayer.state.status === AudioPlayerStatus.Playing) {\n                let song = (subscription.audioPlayer.state.resource).metadata.details\n\n                let imageForColor = song.thumbnails.filter((thumbnail: { url: string | string[]; }) => thumbnail.url.includes('.jpg'))\n\n\n                const nowPlayingEmbed = new MessageEmbed()\n                    .setTitle(song.title || \"Not Found!\")\n                    .setURL(song.video_url || \"Not Found!\")\n                    .setAuthor(song.author.name || \"Not Found!\")\n                    .setThumbnail(song.thumbnails[song.thumbnails.length - 1].url)\n                    .setTimestamp()\n                    .addField('Duration', client.secondsToHms(song.lengthSeconds) || \"Not Found!\", true)\n                    .addField('Upload Date', song.publishDate || \"Not Found!\", true)\n                    .addField('Views', song.viewCount || \"Not Found!\", true)\n                    .addField('Likes', song.likes.toString() || \"Not Found!\", true)\n                    //.addField('Dislikes', song.dislikes.toString() || \"Not Found!\", true)\n                    .addField('Rating', Math.floor(song.averageRating / 5 * 100).toString() + '%' || \"Not Found!\", true)\n                    .setFooter('Youtube', 'https://i.imgur.com/v2zMp3T.png');\n\n                try {\n                    let extractColor = await getColorFromURL(imageForColor[imageForColor.length - 1].url.split('?')[0]);\n                    nowPlayingEmbed.setColor(client.rgbToHex(extractColor[0], extractColor[1], extractColor[2]));\n                } catch (err) {\n                    console.log(err)\n                    nowPlayingEmbed.setColor('#ffffff');\n                }\n\n                await interaction.followUp({ embeds: [nowPlayingEmbed] });\n\n            } else {\n                await interaction.followUp({ content: `No song is currently playing!`, ephemeral: true });\n            }\n        } else {\n            await interaction.followUp('Not playing in this server!');\n        }\n\n    }\n}"]}